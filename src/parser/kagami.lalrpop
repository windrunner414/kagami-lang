use crate::ast::*;
use crate::parser::string_literal;
use crate::parser::{ Errors };
use crate::base::pos::{ BytePos, Span, Spanned };

grammar<'err>(
    errors: &'err mut Errors,
);

match {
    r"\s*" => {},
    r"//[^\r\n]*[\r\n]*" => {},
    _,
}

#[inline]
Sp<Rule>: Spanned<BytePos, Rule> =
    <l: @L> <rule: Rule> <r: @R> =>
        Spanned::from((Span::new_unchecked(l, r), rule));

RecoverError: () = {
    <!> => errors.push(<>.error.into()),
};

pub KagamiModule: KagamiModule = <func_def: FuncDef> => KagamiModule { <> };

FuncDef: FuncDef = "func" <ident: Ident> "(" ")" <ret_type: (":" <Ident>)?> <body: FuncBody> => FuncDef { <> };

FuncBody: FuncBody = {
    "=" "native" <native_func: SimpleStringLiteral> ";" => FuncBody::Native(<>),
    <block: Block> => FuncBody::Block(<>),
}

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <num: IntLiteral> ";" => Stmt { <> };

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

SimpleStringLiteral: String = {
    Sp<r#""([^"\\\r\n]|\\[^\r\n])*""#> => {
        match string_literal::unescape(&(<>.value)[1..(<>.value).len() - 1]) {
            Ok(s) => s.into(),
            Err(err) => {
                errors.push(Spanned::from((<>.span, err)));
                <>.value.into()
            },
        }
    },
    Sp<r#"'([^'\\\r\n]|\\[^\r\n])*'"#> => {
        match string_literal::unescape(&(<>.value)[1..(<>.value).len() - 1]) {
            Ok(s) => s.into(),
            Err(err) => {
                errors.push(Spanned::from((<>.span, err)));
                <>.value.into()
            },
        }
    },
}

IntLiteral: i64 = {
  r"[1-9][0-9]*" => i64::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i64::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i64::from_str_radix(&<>[2..], 16).unwrap(),
}
